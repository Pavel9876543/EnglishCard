import asyncio
import asyncpg
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from googletrans import Translator
import random
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

DB_CONFIG = {
    "user": os.getenv("DB_USER"),
    "password": os.getenv("DB_PASS"),
    "database": os.getenv("DB_NAME"),
    "host": os.getenv("DB_HOST"),
}
API_TOKEN = os.getenv("BOT_TOKEN")

# —Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç—ã
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
translator = Translator()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class AddWord(StatesGroup):
    waiting_for_word = State()

class DeleteWord(StatesGroup):
    waiting_for_word = State()

# —Å–æ–∑–¥–∞—ë–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
pool: asyncpg.Pool = None

async def queries_bd(query: str, *params):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤.
    """
    async with pool.acquire() as conn:
        query_type = query.strip().split()[0].upper()
        if query_type == "SELECT":
            return await conn.fetch(query, *params)
        else:  # INSERT, DELETE, UPDATE
            result = await conn.execute(query, *params)
            return int(result.split()[-1])  # –∫–æ–ª-–≤–æ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫

async def set_commands():
    commands = [
        types.BotCommand(command="/add", description="–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ"),
        types.BotCommand(command="/delete", description="–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ"),
        types.BotCommand(command="/list_words", description="–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤"),
    ]
    await bot.set_my_commands(commands)

# ---------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------
def start_keyboard():
    kb = InlineKeyboardBuilder()
    kb.button(text="–ü–æ–µ—Ö–∞–ª–∏!", callback_data="go")
    return kb.as_markup()

def next_keyboard():
    kb = InlineKeyboardBuilder()
    kb.button(text="–î–∞–ª—å—à–µ ‚û°Ô∏è", callback_data="go")
    return kb.as_markup()

def options_keyboard(options, correct):
    kb = InlineKeyboardBuilder()
    for opt in options:
        kb.button(text=opt, callback_data=f"{opt}_{correct}")
    kb.adjust(2)
    return kb.as_markup()

# ---------- –•–µ–Ω–¥–ª–µ—Ä—ã ----------
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await queries_bd(
        """INSERT INTO users(telegram_id, username) VALUES($1, $2)
           ON CONFLICT (telegram_id) DO NOTHING;""",
        message.from_user.id, message.from_user.username
    )
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç üëã\n"
        "–î–∞–≤–∞–π –ø–æ—Ç—Ä–µ–Ω–∏—Ä—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º!\n\n"
        "–¢—ã –º–æ–∂–µ—à—å —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:\n\n"
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ\n"
        "üîô –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ\n\n"
        "–ù—É —á—Ç–æ, –ø–æ–µ—Ö–∞–ª–∏? ‚¨áÔ∏è",
        reply_markup=start_keyboard()
    )

@dp.message(Command("add"))
async def cmd_add(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å ‚úçÔ∏è")
    await state.set_state(AddWord.waiting_for_word)

@dp.message(Command("delete"))
async def cmd_delete(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å ‚úçÔ∏è")
    await state.set_state(DeleteWord.waiting_for_word)

@dp.message(Command("list_words"))
async def cmd_list_words(message: types.Message):
    rows = await queries_bd(
        """SELECT word_ru, word_en FROM user_words WHERE user_id = $1""",
        message.from_user.id
    )
    if rows:
        words = [f"{r['word_ru']} - {r['word_en']}" for r in rows]
        await message.answer("\n".join(words))
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤")

# ---------- Callback ----------
@dp.callback_query()
async def random_word(callback: types.CallbackQuery):
    if callback.data == "go":
        user_id = callback.from_user.id
        query = await queries_bd(
            """SELECT word_ru, word_en
               FROM (
                    SELECT word_ru, word_en FROM user_words WHERE user_id = $1
                    UNION
                    SELECT word_ru, word_en FROM words
               ) AS combined
               ORDER BY RANDOM() LIMIT 1;""",
            user_id
        )
        word_en = query[0]["word_en"]
        word_ru = query[0]["word_ru"]

        distractors = await queries_bd(
            """SELECT word_en
               FROM (
                    SELECT word_en FROM user_words WHERE user_id = $1
                    UNION
                    SELECT word_en FROM words
               ) AS combined
               WHERE word_en != $2
               ORDER BY RANDOM() LIMIT 3;""",
            user_id, word_en
        )
        options = [d["word_en"] for d in distractors] + [word_en]
        random.shuffle(options)

        await callback.message.answer(
            f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ: {word_ru}",
            reply_markup=options_keyboard(options, word_en)
        )
    else:
        try:
            chosen, correct = callback.data.split("_")
            if chosen == correct:
                await callback.message.answer("–°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –≤–µ—Ä–Ω–æ! üéâ", reply_markup=next_keyboard())
            else:
                await callback.message.answer("–ù–µ–≤–µ—Ä–Ω–æ ‚ùå")
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:", e)

    await callback.answer()

# ---------- FSM ----------
@dp.message(AddWord.waiting_for_word)
async def add_word(message: types.Message, state: FSMContext):
    word_ru = message.text.strip().capitalize()
    word_en = translator.translate(word_ru, src="ru", dest="en").text
    await queries_bd(
        "INSERT INTO user_words(word_ru, word_en, user_id) VALUES($1, $2, $3);",
        word_ru, word_en, message.from_user.id
    )
    await message.answer(f"‚úÖ –°–ª–æ–≤–æ '{word_ru}: {word_en}' –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    await state.clear()

@dp.message(DeleteWord.waiting_for_word)
async def delete_word(message: types.Message, state: FSMContext):
    result = await queries_bd(
        "DELETE FROM user_words WHERE word_ru = $1 and user_id = $2;",
        message.text.strip(), message.from_user.id
    )
    if result == 1:
        await message.answer(f"‚úÖ –°–ª–æ–≤–æ '{message.text}' —É–¥–∞–ª–µ–Ω–æ!")
    else:
        await message.answer(f"‚ùå –°–ª–æ–≤–æ '{message.text}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
    await state.clear()

# ---------- Main ----------
async def main():
    global pool
    pool = await asyncpg.create_pool(**DB_CONFIG)  # —Å–æ–∑–¥–∞—ë–º –ø—É–ª
    await set_commands()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
